@using Theatre_TimeLine.Services
@using Theatre_Timeline.Contracts
@using Theatre_TimeLine.Models
@using Theatre_Timeline.Components
@inject ITenantManagerService TenantManagerService
@implements IRoadToThereManager

@page "/TenantManagement/{Tenant?}"

<div id="existing-tenants">
    @foreach (ITenantContainer container in TenantManagerService.GetWebApps())
    {
        <TenantConfiguration TenantContainer="@container" OnCreateRoad="CreateRoad" OnRemoveTenant="RemoveTenant" />
        <br />
    }
</div>

<br />
<div id="create-tenant">
    <p>Place holder for a form.</p>
    <button class="btn btn-primary" @onclick="CreateTenant">Create Tenant</button>
</div>

@code {

    [Parameter]
    public string? Tenant { get; set; }  = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public void CreateRoad(ITenantContainer tenantContainer)
    {
        RoadToThere roadToThere = new RoadToThere()
            {
                RoadId = Guid.NewGuid(),
                TenantId = string.IsNullOrEmpty(this.Tenant) ? Guid.Empty : Guid.Parse(this.Tenant)
            };
        tenantContainer.SaveRoad(roadToThere);
    }

    public void SaveRoad(RoadToThere roadToThere) => TenantManagerService.SaveRoad(roadToThere);

    public void RemoveRoad(Guid roadId) => TenantManagerService.RemoveRoad(roadId);

    public IRoadToThere GetRoad(Guid roadId) => TenantManagerService.GetRoad(roadId);


    private void CreateTenant()
    {
        TenantManagerService.CreateTenant(new TenantContainer()
            {
                TenantId = Guid.NewGuid(),
                Description = "Test description",
                TenantName = "Test Name"
            });
        this.StateHasChanged();
    }

    private void RemoveTenant(ITenantContainer tenantContainer)
    {
        TenantManagerService.RemoveTenant(tenantContainer.TenantId);
        this.StateHasChanged();
    }

    private bool TryGetTenantContainer(out ITenantContainer? tenantContainer)
    {
        tenantContainer = null;
        if (!string.IsNullOrEmpty(this.Tenant) && Guid.TryParse(this.Tenant, out Guid result))
        {
            tenantContainer = TenantManagerService.GetTenant(result);
        }

        return tenantContainer != null;
    }
}
