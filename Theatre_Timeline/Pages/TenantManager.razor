@using Theatre_TimeLine.Services
@using Theatre_Timeline.Contracts
@using Theatre_TimeLine.Models
@using Theatre_Timeline.Components
@inject ITenantManagerService TenantManagerService
@implements IRoadToThereManager

@page "/TenantManagement/{Tenant?}"

<MudLayout>
    <MudAppBar Color="Color.Primary" Dense="true" Gutters="true">
        <MudIconButton Icon="@Icons.Material.Filled.AddCard" Color="Color.Inherit" Edge="Edge.Start" OnClick="CreateTenant" />
    </MudAppBar>

    <MudMainContent id="existing-tenants">
        <MudExpansionPanels>
            @foreach (ITenantContainer container in TenantManagerService.GetWebApps())
            {
                <MudExpansionPanel Text="@container.TenantName">
                    <TenantConfiguration TenantContainer="@container" OnCreateRoad="CreateRoad" OnRemoveTenant="RemoveTenant" OnClick="(tenant) => this.Tenant = tenant.TenantId.ToString()" />
                </MudExpansionPanel>

                <br />
            }
        </MudExpansionPanels>
    </MudMainContent>
</MudLayout>

@code {

    [Parameter]
    public string? Tenant { get; set; }  = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public void CreateRoad(ITenantContainer tenantContainer)
    {
        RoadToThere roadToThere = new RoadToThere()
            {
                RoadId = Guid.NewGuid(),
                TenantId = tenantContainer.TenantId,
                Title = "Test Road title",
            };
        tenantContainer.SaveRoad(roadToThere);
    }

    public void SaveRoad(RoadToThere roadToThere) => TenantManagerService.SaveRoad(roadToThere);

    public void RemoveRoad(Guid roadId) => TenantManagerService.RemoveRoad(roadId);

    public IRoadToThere GetRoad(Guid roadId) => TenantManagerService.GetRoad(roadId);


    private void CreateTenant()
    {
        TenantManagerService.CreateTenant(new TenantContainer()
            {
                TenantId = Guid.NewGuid(),
                Description = "Test description",
                TenantName = "Test Name"
            });
        this.StateHasChanged();
    }

    private void RemoveTenant(ITenantContainer tenantContainer)
    {
        TenantManagerService.RemoveTenant(tenantContainer.TenantId);
        this.StateHasChanged();
    }

    private bool TryGetTenantContainer(out ITenantContainer? tenantContainer)
    {
        tenantContainer = null;
        if (!string.IsNullOrEmpty(this.Tenant) && Guid.TryParse(this.Tenant, out Guid result))
        {
            tenantContainer = TenantManagerService.GetTenant(result);
        }

        return tenantContainer != null;
    }
}
