@using System.Security.Claims
@using Theatre_TimeLine.Components
@using Theatre_TimeLine.Contracts
@using Theatre_TimeLine.Models
@using Theatre_TimeLine.Services
@inject ITenantManagerService TenantManagerService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISecurityGroupService SecurityGroupService
@inject ISnackbar Snackbar
@implements IRoadToThereManager
@attribute [Authorize]
@page "/TenantManagement/{Tenant?}"

<MudMenu Icon="@Icons.Material.Filled.MoreVert"
         style="fixed;"
         AriaLabel="Open user menu">
    @if (HasRequiredPerms(RequiredSecurityLevel.Global))
    {
        <MudMenuItem Label="Create Tenant" OnClick="CreateTenant" />
    }

    <MudMenuItem Label="Logout" OnClick="Logout" />
</MudMenu>

<MudPaper Elevation="0" Style="overflow:auto; position:relative; min-height:75vh" Square="true">
    <div class="d-flex justify-center align-center mud-height-full mud-width-full">
        <MudExpansionPanels>
            @foreach (ITenantContainer container in TenantManagerService.GetTenants())
            {
                if (!HasRequiredPerms(RequiredSecurityLevel.TenantManager | RequiredSecurityLevel.Global, container.TenantId))
                {
                    continue;
                }

                <MudExpansionPanel Text="@container.TenantName" Expanded="ShouldOpenPanel(container.TenantId.ToString())" ExpandedChanged="(changedArgs) => OnPanelChange(tenantId: container.TenantId.ToString(), changedArgs)">
                    <CascadingAuthenticationState>
                        <TenantConfiguration TenantContainer="@container"
                                             OnCreateRoad="CreateRoad"
                                             OnRemoveTenant="RemoveTenant"
                                             OnSaveRoad="SaveRoad"
                                             OnRemoveRoad="RemoveRoad"
                                             OnClick="(tenant) => this.Tenant = tenant.TenantId.ToString()" />
                    </CascadingAuthenticationState>
                    <MudDivider Class="my-2" />
                    <TenantUserManagement TenantContainer="@container" />
                </MudExpansionPanel>

                <br />
            }
        </MudExpansionPanels>
    </div>
</MudPaper>

@code {
    private bool _drawerOpen = true;
    private string userEmail = string.Empty;


    [Parameter]
    public string? Tenant { get; set; }  = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ClaimsPrincipal user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        userEmail = user.GetEmail();
    }

    private void Logout()
        => NavigationManager.NavigateTo("MicrosoftIdentity/Account/SignOut", forceLoad: true);

    public void CreateRoad(ITenantContainer tenantContainer)
    {
        RoadToThere roadToThere = new RoadToThere()
            {
                RoadId = Guid.NewGuid(),
                TenantId = tenantContainer.TenantId,
                Title = "Test Road title",
            };
        tenantContainer.SaveRoad(roadToThere);
    }

    /// <summary>
    /// Save the road to the tenant.
    /// </summary>
    /// <param name="roadToThere"><see cref="RoadToThere"/>.</param>
    public void SaveRoad(IRoadToThere roadToThere)
    {
        TenantManagerService.SaveRoad(roadToThere);
        this.StateHasChanged();
    }

    /// <summary>
    /// Remove the road from the tenant.
    /// </summary>
    /// <param name="roadId">Road ID.</param>
    public void RemoveRoad(Guid roadId)
    {
        TenantManagerService.RemoveRoad(roadId);
        this.StateHasChanged();
    }

    /// <summary>
    /// Get the road from the tenant.
    /// </summary>
    /// <param name="roadId">Road ID.</param>
    /// <returns><see cref="IRoadToThere"/>.</returns>
    public IRoadToThere GetRoad(Guid roadId) => TenantManagerService.GetRoad(roadId);

    private void CreateTenant()
    {
        if (!HasRequiredPerms(RequiredSecurityLevel.Global))
        {
            Snackbar.Add("Only Roads-Admin can create tenants.", Severity.Warning);
            return;
        }

        TenantManagerService.CreateTenant(new TenantContainer()
            {
                TenantId = Guid.NewGuid(),
                Description = "Test description",
                TenantName = "Test Name"
            });
        this.StateHasChanged();
    }

    private void RemoveTenant(ITenantContainer tenantContainer)
    {
        if (!HasRequiredPerms(RequiredSecurityLevel.TenantManager))
        {
            Snackbar.Add("Only Roads-Admin or TenantManagers can remove tenants.", Severity.Warning);
            return;
        }

        TenantManagerService.RemoveTenant(tenantContainer.TenantId);
        this.StateHasChanged();
    }

    private bool TryGetTenantContainer(out ITenantContainer? tenantContainer)
    {
        tenantContainer = null;
        if (!string.IsNullOrEmpty(this.Tenant) && Guid.TryParse(this.Tenant, out Guid result))
        {
            tenantContainer = TenantManagerService.GetTenant(result);
        }

        return tenantContainer != null;
    }

    private bool ShouldOpenPanel(string tenant)
    {
        if (string.IsNullOrEmpty(this.Tenant))
        {
            return false;
        }

        return string.Equals(tenant, this.Tenant);
    }

    private void OnPanelChange(string tenantId, bool expanding)
    {
        if (!expanding)
        {
            return;
        }

        UriBuilder uri = new(NavigationManager.BaseUri);
        uri.Path = $"TenantManagement/{tenantId}";
        NavigationManager.NavigateTo(uri.Uri.AbsoluteUri);
    }

    private bool HasRequiredPerms(RequiredSecurityLevel requiredSecurityLevel)
    {
        return HasRequiredPerms(requiredSecurityLevel, Guid.Empty);
    }

    private bool HasRequiredPerms(RequiredSecurityLevel requiredSecurityLevel, Guid tenantId)
    {
        return SecurityGroupService.HasRequiredPerms(requiredSecurityLevel, userEmail, tenantId, Guid.Empty)
            .GetAwaiter()
            .GetResult();
    }
}
