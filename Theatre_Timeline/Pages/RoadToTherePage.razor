@namespace Theatre_TimeLine.Pages

@using Theatre_TimeLine.Contracts
@using Theatre_TimeLine.Models
@using Theatre_TimeLine.Components

@page "/RoadToThere/{TenantId?}"

@inject ITenantManagerService TenantManagerService
@inject NavigationManager NavigationManager

@if (tenant is null)
{
    <MudText>Loading...</MudText>
    return;
}

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="align-content-center pa-6">
    @foreach (IRoadToThere road in tenant.Roads)
    {
        <MudTabPanel Text="@road?.Title">
            <MudPaper Elevation="2" Class="p-3" >
                <MudText>@road?.Description</MudText>
                <img src="@road?.Banner" />
                @for (int i = 0; i <= road?.Duration; i++)
                {
                    <Block Road="road" BlockIndex="i" />
                }
            </MudPaper>
        </MudTabPanel>
    }
</MudTabs>

@code {

    private ITenantContainer? tenant;

    [Parameter]
    public string? TenantId { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(TenantId))
        {
            UriBuilder uri = new (NavigationManager.BaseUri);
            uri.Path = $"RoadToThere/{Theatre_TimeLine.Services.TenantManagerService.DemoGuid}/{Theatre_TimeLine.Services.TenantManagerService.DemoGuid}";
            NavigationOptions options = new()
                {
                    ForceLoad = true,
                    ReplaceHistoryEntry = true
                };
            NavigationManager.NavigateTo(uri.Uri.AbsoluteUri, options);
            return;
        }

        tenant = TenantManagerService.GetTenant(Guid.Parse(TenantId));
        await base.OnInitializedAsync();
    }
}
