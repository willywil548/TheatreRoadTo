@namespace Theatre_Timeline.Pages
@using Theatre_Timeline.Contracts
@using Theatre_TimeLine.Models
@page "/RoadToThere/{TenantId?}/{RoadId?}"

@inject ITenantManagerService TenantManagerService
@inject NavigationManager NavigationManager

@if (road is null)
{
    <MudText>Loading...</MudText>
    return;
}

<MudTimeline TimelinePosition="@TimelinePosition.Alternate">
    <MudTimelineItem>
        <MudText>Insert Poll here.</MudText>
    </MudTimelineItem>
    <MudTimelineItem>
        <MudText Align="Align.End">Insert update to parents here.</MudText>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Primary">
        <MudText>Insert Instagram Post here</MudText>
    </MudTimelineItem>
</MudTimeline>
<MudTimeline TimelinePosition="@TimelinePosition.Alternate">
    <MudTimelineItem>
        <MudText>Insert Poll here.</MudText>
    </MudTimelineItem>
    <MudTimelineItem>
        <MudText Align="Align.End">Insert update to parents here.</MudText>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Primary">
        <MudText>Insert Instagram Post here</MudText>
    </MudTimelineItem>
</MudTimeline>

@code {

    private IRoadToThere? road;

    [Parameter]
    public string? TenantId { get; set; } = string.Empty;

    [Parameter]
    public string? RoadId { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        if (string.IsNullOrEmpty(TenantId) || string.IsNullOrEmpty(RoadId))
        {
            UriBuilder uri = new (NavigationManager.BaseUri);
            uri.Path = $"RoadToThere/{Theatre_TimeLine.Services.TenantManagerService.DemoGuid}/{Theatre_TimeLine.Services.TenantManagerService.DemoGuid}";
            NavigationOptions options = new()
                {
                    ForceLoad = true,
                    ReplaceHistoryEntry = true
                };
            NavigationManager.NavigateTo(uri.Uri.AbsoluteUri, options);
            return;
        }

        road = TenantManagerService.GetTenant(Guid.Parse(TenantId))?.GetRoad(Guid.Parse(RoadId));

        await base.OnInitializedAsync();
    }
}
