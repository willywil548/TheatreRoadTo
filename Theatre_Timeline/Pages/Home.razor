@using MudBlazor
@using Theatre_TimeLine.Contracts
@using Theatre_TimeLine.Services
@attribute [Authorize]
@page "/home"

@inject ITenantManagerService TenantManagerService
@inject ISecurityGroupService SecurityGroupService
@inject AuthenticationStateProvider Auth
@inject NavigationManager Nav

@* 
    Page: Home
    Summary: After sign-in, lists tenants and roads the current user can access.
    Access rules:
      - Global admins: all tenants and roads
      - Tenant managers/users: all roads for that tenant
      - Road users: only roads where the user is a member
*@
<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">My Tenants and Roads</MudText>
    <MudDivider Class="my-2" />

    @if (_loading)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="my-4" />
    }
    else if (_items.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
            No tenants or roads available for your account.
        </MudAlert>
    }
    else
    {
        <MudGrid GutterSize="GutterSize.Small">
            @foreach (var item in _items)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Outlined="true" Class="mb-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@item.Tenant.TenantName</MudText>
                            <MudText Typo="Typo.caption">@item.Tenant.Description</MudText>
                            <MudDivider Class="my-2" />

                            <MudList T="string" Dense="true" Class="mt-2">
                                @if (item.Roads.Count() == 0)
                                {
                                    <MudListItem Disabled="true">No accessible roads</MudListItem>
                                }
                                else
                                {
                                    @foreach (var r in item.Roads)
                                    {
                                        <MudListItem>
                                            <MudText>@r.Title</MudText>
                                            <MudSpacer />
                                            <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="@(() => OpenRoad(item.Tenant.TenantId, r.RoadId))">
                                                Open
                                            </MudButton>

                                            @if (item.IsManager(r.RoadId.ToString()))
                                            {
                                                <MudChip T="string" Color="Color.Primary" Label="true" Class="mr-1">Manager</MudChip>
                                            }
                                            else if (item.IsMember(r.RoadId.ToString()))
                                            {
                                                <MudChip T="string" Color="Color.Secondary" Label="true" Class="mr-1">Member</MudChip>
                                            }
                                            else if (item.IsRoadMember(r.RoadId.ToString()))
                                            {
                                                <MudChip T="string" Color="Color.Secondary" Label="true" Class="mr-1">Member</MudChip>
                                            }
                                            else
                                            {
                                                <MudChip T="string" Color="Color.Info" Label="true" Class="mr-1">Road Access</MudChip>
                                            }
                                        </MudListItem>
                                    }
                                }
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudPaper>

@code {
    private readonly List<TenantItem> _items = new();
    private bool _loading = true;

    /// <summary>
    /// Loads accessible tenants and roads for the current user according to group memberships.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        var auth = await Auth.GetAuthenticationStateAsync();
        var email = auth.User.GetEmail();

        var tenants = TenantManagerService.GetTenants();
        bool isGlobal = false;

        if (!string.IsNullOrWhiteSpace(email))
        {
            isGlobal = await SecurityGroupService.IsUserInGroupAsync(email, SecurityGroupNameBuilder.GlobalAdminsGroup);
        }

        foreach (var t in tenants)
        {
            // Tenant-level groups
            var tenantMgrGroup = SecurityGroupNameBuilder.TenantManager(t.TenantId);
            var tenantUserGroup = SecurityGroupNameBuilder.TenantUser(t.TenantId);

            bool isMgr = isGlobal || (!string.IsNullOrWhiteSpace(email) && await SecurityGroupService.IsUserInGroupAsync(email, tenantMgrGroup));
            bool isMember = isGlobal || isMgr || (!string.IsNullOrWhiteSpace(email) && await SecurityGroupService.IsUserInGroupAsync(email, tenantUserGroup));

            var roads = new List<IRoadToThere>();

            foreach (var r in t.Roads)
            {
                if (string.Equals(r.TenantId, Services.TenantManagerService.DemoGuid))
                {
                    roads.Add(r);
                    continue;
                }

                var roadGroup = SecurityGroupNameBuilder.TenantRoadUser(t.TenantId, r.RoadId);
                if (!string.IsNullOrWhiteSpace(email) && await SecurityGroupService.IsUserInGroupAsync(email, roadGroup))
                {
                    roads.Add(r);
                }
            }

            if (roads.Count > 0 || isGlobal || isMgr || isMember)
            {
                _items.Add(new TenantItem(SecurityGroupService, t, email));
            }
        }

        _loading = false;
    }

    /// <summary>
    /// Navigates to the Road page for the given tenant and road.
    /// </summary>
    private void OpenRoad(Guid tenantId, Guid roadId)
        => Nav.NavigateTo($"RoadToThere/{tenantId}/{roadId}");

    /// <summary>
    /// View model for a tenant and the roads visible to the current user.
    /// </summary>
    private sealed class TenantItem
    {
        private readonly ISecurityGroupService securityGroupService;
        private readonly string email;
        private readonly Dictionary<string, RequiredSecurityLevel> levelMap = new Dictionary<string, RequiredSecurityLevel>();

        internal TenantItem(
            ISecurityGroupService securityGroupService,
            ITenantContainer tenantContainer,
            string email)
        {
            this.securityGroupService = securityGroupService;
            this.Tenant = tenantContainer;
            this.email = email;
        }

        public ITenantContainer Tenant { get; init; }

        /// <summary>Roads the user can access within the tenant.</summary>
        public IEnumerable<IRoadToThere> Roads => GetRoadsToThere();

        public bool IsManager(string roadId)
        {

            if (levelMap.TryGetValue(roadId, out RequiredSecurityLevel level))
            {
                return level == RequiredSecurityLevel.TenantManager ||
                level == RequiredSecurityLevel.Global;
            }

            return false;
        }

        public bool IsMember (string roadId)
        {
            if (levelMap.TryGetValue(roadId, out RequiredSecurityLevel level))
            {
                return level == RequiredSecurityLevel.TenantUser;
            }

            return false;
        }

        public bool IsRoadMember (string roadId)
        {
            if (levelMap.TryGetValue(roadId, out RequiredSecurityLevel level))
            {
                return level == RequiredSecurityLevel.RoadUser;
            }

            return false;
        }

        private IEnumerable<IRoadToThere> GetRoadsToThere()
        {
            this.levelMap.Clear();
            List<IRoadToThere> roads = new();
            foreach (var r in Tenant.Roads)
            {
                if (string.Equals(r.TenantId, Services.TenantManagerService.DemoGuid))
                {
                    roads.Add(r);
                    continue;
                }

                if (r.IsUserAuthorizedForRoad(email, securityGroupService, out RequiredSecurityLevel requiredSecurityLevel))
                {
                    levelMap[r.RoadId.ToString()] = requiredSecurityLevel;
                    roads.Add(r);
                }
            }

            return roads;
        }
    }
}