@using MudBlazor
@using Theatre_TimeLine.Contracts
@using Theatre_TimeLine.Services
@attribute [Authorize]
@page "/home"

@inject ITenantManagerService TenantManagerService
@inject ISecurityGroupService SecurityGroupService
@inject AuthenticationStateProvider Auth
@inject NavigationManager Nav

@* 
    Page: Home
    Summary: After sign-in, lists tenants and roads the current user can access.
    Access rules:
      - Global admins: all tenants and roads
      - Tenant managers/users: all roads for that tenant
      - Road users: only roads where the user is a member
*@
<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">My Tenants and Roads</MudText>
    <MudDivider Class="my-2" />

    @if (_loading)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="my-4" />
    }
    else if (_items.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
            No tenants or roads available for your account.
        </MudAlert>
    }
    else
    {
        <MudGrid GutterSize="GutterSize.Small">
            @foreach (var item in _items)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Outlined="true" Class="mb-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@item.Tenant.TenantName</MudText>
                            <MudText Typo="Typo.caption">@item.Tenant.Description</MudText>
                            <MudDivider Class="my-2" />
                            @if (item.IsManager)
                            {
                                <MudChip T="string" Color="Color.Primary" Label="true" Class="mr-1">Manager</MudChip>
                            }
                            else if (item.IsMember)
                            {
                                <MudChip T="string" Color="Color.Secondary" Label="true" Class="mr-1">Member</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Info" Label="true" Class="mr-1">Road Access</MudChip>
                            }

                            <MudList T="string" Dense="true" Class="mt-2">
                                @if (item.Roads.Count == 0)
                                {
                                    <MudListItem Disabled="true">No accessible roads</MudListItem>
                                }
                                else
                                {
                                    @foreach (var r in item.Roads)
                                    {
                                        <MudListItem>
                                            <MudText>@r.Title</MudText>
                                            <MudSpacer />
                                            <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="@(() => OpenRoad(item.Tenant.TenantId, r.RoadId))">
                                                Open
                                            </MudButton>
                                        </MudListItem>
                                    }
                                }
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudPaper>

@code {
    private readonly List<TenantItem> _items = new();
    private bool _loading = true;

    /// <summary>
    /// Loads accessible tenants and roads for the current user according to group memberships.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        var auth = await Auth.GetAuthenticationStateAsync();
        var email = auth.User.FindFirst("preferred_username")?.Value ?? auth.User.Identity?.Name ?? string.Empty;

        var tenants = TenantManagerService.GetTenants();
        bool isGlobal = false;

        if (!string.IsNullOrWhiteSpace(email))
        {
            isGlobal = await SecurityGroupService.IsUserInGroupAsync(email, SecurityGroupNameBuilder.GlobalAdminsGroup);
        }

        foreach (var t in tenants)
        {
            // Tenant-level groups
            var tenantMgrGroup = SecurityGroupNameBuilder.TenantManager(t.TenantId);
            var tenantUserGroup = SecurityGroupNameBuilder.TenantUser(t.TenantId);

            bool isMgr = isGlobal || (!string.IsNullOrWhiteSpace(email) && await SecurityGroupService.IsUserInGroupAsync(email, tenantMgrGroup));
            bool isMember = isGlobal || isMgr || (!string.IsNullOrWhiteSpace(email) && await SecurityGroupService.IsUserInGroupAsync(email, tenantUserGroup));

            var roads = new List<IRoadToThere>();

            if (isGlobal || isMgr || isMember)
            {
                // Tenant-level access => all roads visible
                roads.AddRange(t.Roads);
            }
            else
            {
                // Road-scoped access => include only roads with membership
                foreach (var r in t.Roads)
                {
                    var roadGroup = SecurityGroupNameBuilder.TenantRoadUser(t.TenantId, r.RoadId);
                    if (!string.IsNullOrWhiteSpace(email) && await SecurityGroupService.IsUserInGroupAsync(email, roadGroup))
                    {
                        roads.Add(r);
                    }
                }
            }

            if (roads.Count > 0 || isGlobal || isMgr || isMember)
            {
                _items.Add(new TenantItem
                {
                    Tenant = t,
                    Roads = roads,
                    IsManager = isMgr,
                    IsMember = !isMgr && isMember // member but not manager
                });
            }
        }

        _loading = false;
    }

    /// <summary>
    /// Navigates to the Road page for the given tenant and road.
    /// </summary>
    private void OpenRoad(Guid tenantId, Guid roadId)
        => Nav.NavigateTo($"RoadToThere/{tenantId}/{roadId}");

    /// <summary>
    /// View model for a tenant and the roads visible to the current user.
    /// </summary>
    private sealed class TenantItem
    {
        /// <summary>Tenant metadata and roads container.</summary>
        public ITenantContainer Tenant { get; set; } = default!;

        /// <summary>Roads the user can access within the tenant.</summary>
        public List<IRoadToThere> Roads { get; set; } = new();
        public bool IsManager { get; set; }
        public bool IsMember { get; set; }
    }
}