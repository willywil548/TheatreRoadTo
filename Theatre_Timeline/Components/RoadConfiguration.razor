@using Theatre_Timeline.Contracts
@using Theatre_TimeLine.Models
@using Theatre_Timeline.Services
@namespace Theatre_Timeline.Components

@inject IClipboardService ClipboardService
@inject NavigationManager NavigationManager

<MudCard>
    <MudCardHeader Class="card card-header">@this.Road.ToString()</MudCardHeader>
    <MudCardContent>
        <h6>ID: @Road.RoadId</h6>
        <MudDatePicker Label="Start Date" @bind-Date="Road.StartTime" />
        <MudDatePicker Label="End Date" @bind-Date="Road.EndTime" />
        <MudTextField @bind-Value="Road.Title" Label="Title" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="Road.Description" Label="Description" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="Road.RoadAdmin" Label="Admin" Variant="Variant.Text"></MudTextField>
        <MudSelect @bind-Value="Road.RoadScope" Label="Select Scope" HelperText="Enum" OpenIcon="@Icons.Material.Filled.CalendarViewWeek" AdornmentColor="Color.Info">
            @foreach (RoadScope item in Enum.GetValues(typeof(RoadScope)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
        <MudNumericField @bind-Value="Road.RoadScopeLength" Label="Length of scope" Variant="Variant.Text" Min="0" Max="1000" />
        <MudTextField @bind-Value="Road.PageHostCssPath" Label="CSS" Variant="Variant.Text" Lines="10"></MudTextField>
        <code>@Road.TenantId</code>
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary" OnClick="CopyButtonClicked">Copy Location</MudButton>
        <MudButtonGroup Color="Color.Secondary">
            <MudButton OnClick="ActionButtonClicked">@buttonText.Item2</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                @foreach (string action in tenantActions)
                {
                    <MudMenuItem OnClick="() => SetButtonText(Array.IndexOf(tenantActions, action))">@action</MudMenuItem>
                }
            </MudMenu>
        </MudButtonGroup>
    </MudCardActions>
</MudCard>

@code {
    private static readonly string[] tenantActions =
    {
        "Save Road",
        "Remove Road"
    };

    private const string scopeLabel = "What is the scope of this road?";
    private const string scopePlaceHolder = "Type of length";

    private Tuple<int, string> buttonText = Tuple.Create(0, tenantActions[0]);

    [Parameter]
    public IRoadToThere Road { get; set; } = new RoadToThere();

    [Parameter]
    public Action<IRoadToThere>? OnSaveRoad { get; set; }

    [Parameter]
    public Action<Guid>? OnRemoveRoad { get; set; }

    private void CopyButtonClicked()
    {
        UriBuilder uriBuilder = new UriBuilder(NavigationManager.BaseUri);
        uriBuilder.Path = $"RoadToThere/{Road.TenantId}/{Road.RoadId}";
        ClipboardService.CopyToClipboard(uriBuilder.Uri.AbsoluteUri);
    }

    private void SetButtonText(int id)
    {
        buttonText = Tuple.Create(id, tenantActions[id]);
    }

    private void ActionButtonClicked()
    {
        switch (buttonText.Item1)
        {
            case 0:
                OnSaveRoad?.Invoke(Road);
                break;
            case 1:
                OnRemoveRoad?.Invoke(Road.RoadId);
                break;
        }
    }
}
