@using Theatre_TimeLine.Contracts
@using Theatre_TimeLine.Models
@using Theatre_TimeLine.Services
@namespace Theatre_TimeLine.Components

@inject IClipboardService ClipboardService
@inject NavigationManager NavigationManager

<MudCard>
    <MudCardHeader Class="card card-header">@this.Road.ToString()</MudCardHeader>
    <MudCardContent>
        <h6>ID: @Road.RoadId</h6>
        <MudDatePicker Label="Start Date" @bind-Date="startTime" />
        <MudTextField @bind-Value="Road.Title" Label="Title" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="Road.Description" Label="Description" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="Road.RoadAdmin" Label="Admin" Variant="Variant.Text"></MudTextField>
        <MudSelect @bind-Value="roadScope"
        Label="Select Scope"
        HelperText="In terms of measurement, how many ? should this last."
        OpenIcon="@Icons.Material.Filled.CalendarViewWeek"
        AdornmentColor="Color.Info"
        >
            @foreach (RoadScope item in Enum.GetValues(typeof(RoadScope)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
        <MudNumericField @bind-Value="roadScopeLength"
        Label="Length of scope"
        Variant="Variant.Text"
        Min="1"
        Max="1000"
        HelperText="How many of the measurement in the scope should it last?"
        />
        <MudDatePicker Label="End Date" @bind-Date="Road.EndTime" />
        <MudTextField @bind-Value="Road.PageHostCssPath" Label="CSS" Variant="Variant.Text" Lines="10"></MudTextField>
        <br />
        ID: <code>@Road.TenantId</code>
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary" OnClick="CopyButtonClicked">Copy Location</MudButton>
        <MudButtonGroup Color="Color.Secondary">
            <MudButton OnClick="ActionButtonClicked">@buttonText.Item2</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                @foreach (string action in tenantActions)
                {
                    <MudMenuItem OnClick="() => SetButtonText(Array.IndexOf(tenantActions, action))">@action</MudMenuItem>
                }
            </MudMenu>
        </MudButtonGroup>
    </MudCardActions>
</MudCard>

@code {
    private static readonly string[] tenantActions =
    {
        "Save Road",
        "Remove Road"
    };

    private const string scopeLabel = "What is the scope of this road?";
    private const string scopePlaceHolder = "Type of length";

    private Tuple<int, string> buttonText = Tuple.Create(0, tenantActions[0]);

    [Parameter]
    public IRoadToThere Road { get; set; } = new RoadToThere();

    [Parameter]
    public Action<IRoadToThere>? OnSaveRoad { get; set; }

    [Parameter]
    public Action<Guid>? OnRemoveRoad { get; set; }

    private RoadScope roadScope
    {
        get => Road.RoadScope;
        set
        {
            Road.RoadScope = value;
            ScopeChanged();
        }
    }

    private int roadScopeLength
    {
        get => Road.RoadScopeLength;
        set
        {
            Road.RoadScopeLength = value;
            ScopeChanged();
        }
    }

    private DateTime? startTime
    {
        get => Road.StartTime ?? DateTime.Now;
        set
        {
            Road.StartTime = value;
            ScopeChanged();
        }
    }

    private void ScopeChanged()
    {
        switch (Road.RoadScope)
        {
            case RoadScope.Day:
                Road.EndTime = Road.StartTime?.AddDays(Road.RoadScopeLength);
                break;
            case RoadScope.Week:
                Road.EndTime = Road.StartTime?.AddDays((Road.RoadScopeLength * 7) - 1);
                break;
            case RoadScope.Month:
                Road.EndTime = Road.StartTime?.AddMonths(Road.RoadScopeLength);
                break;
            case RoadScope.Year:
                Road.EndTime = Road.StartTime?.AddYears(Road.RoadScopeLength);
                break;
        }
    }

    private void CopyButtonClicked()
    {
        UriBuilder uriBuilder = new UriBuilder(NavigationManager.BaseUri);
        uriBuilder.Path = $"RoadToThere/{Road.TenantId}/{Road.RoadId}";
        ClipboardService.CopyToClipboard(uriBuilder.Uri.AbsoluteUri);
    }

    private void SetButtonText(int id)
    {
        buttonText = Tuple.Create(id, tenantActions[id]);
    }

    private void ActionButtonClicked()
    {
        switch (buttonText.Item1)
        {
            case 0:
                OnSaveRoad?.Invoke(Road);
                break;
            case 1:
                OnRemoveRoad?.Invoke(Road.RoadId);
                break;
        }
    }
}
